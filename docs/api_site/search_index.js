var documenterSearchIndex = {"docs":
[{"location":"#SoccerManager.jl","page":"Home","title":"SoccerManager.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Docstrings","page":"Home","title":"Docstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoccerManager\nCollapsedDocStrings = true\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SoccerManager]","category":"page"},{"location":"#SoccerManager.SoccerManager","page":"Home","title":"SoccerManager.SoccerManager","text":"A performant soccer simulator for gaming and ML.\n\nThe main data structure:\n\nLeagueData\n- TeamVec{nteams}\n    - Team[1]\n        - Roster\n        - TeamSheet\n        - Comms\n    [...]\n    - Team[nteams]\n        - Roster\n        - TeamSheet\n        - Comms\n- LgTable\n- TeamNames\n- Schedule\n\n\n\n\n\n","category":"module"},{"location":"#SoccerManager.DATADIR0","page":"Home","title":"SoccerManager.DATADIR0","text":"Path and file format constants\n\nDATADIR0 :: String     : Path to package data directory\nROSTINFO :: RosterInfo : Immutable struct containing config values for reading/writing the fixed-width roster files\n\nSee also\n\nUses    : RosterInfo\nUsed by : init_user_data_dir\nRelated : FUNC\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.MAXPLAYERS","page":"Home","title":"SoccerManager.MAXPLAYERS","text":"Compile-time constants.\n\nMAXPLAYERS :: Int : Maximum number of players per team. A Roster must contain exactly this many entries.                        Teams with fewer players are padded with a placeholder\nNSUBS      :: Int : Number of subs included in the teamsheet\nNLINEUP    :: Int : Number of players in the teamsheet. Eleven starters plus NSUBS\n\nSee also\n\nUses    : FUNC\nUsed by : Roster, Team, parse_roster, reset_roster, write_roster, flatten_rosters, parse_teamsheet\nRelated : RosterInfo, UpdateConfig\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.NLINEUP","page":"Home","title":"SoccerManager.NLINEUP","text":"Compile-time constants.\n\nMAXPLAYERS :: Int : Maximum number of players per team. A Roster must contain exactly this many entries.                        Teams with fewer players are padded with a placeholder\nNSUBS      :: Int : Number of subs included in the teamsheet\nNLINEUP    :: Int : Number of players in the teamsheet. Eleven starters plus NSUBS\n\nSee also\n\nUses    : FUNC\nUsed by : Roster, Team, parse_roster, reset_roster, write_roster, flatten_rosters, parse_teamsheet\nRelated : RosterInfo, UpdateConfig\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.NSUBS","page":"Home","title":"SoccerManager.NSUBS","text":"Compile-time constants.\n\nMAXPLAYERS :: Int : Maximum number of players per team. A Roster must contain exactly this many entries.                        Teams with fewer players are padded with a placeholder\nNSUBS      :: Int : Number of subs included in the teamsheet\nNLINEUP    :: Int : Number of players in the teamsheet. Eleven starters plus NSUBS\n\nSee also\n\nUses    : FUNC\nUsed by : Roster, Team, parse_roster, reset_roster, write_roster, flatten_rosters, parse_teamsheet\nRelated : RosterInfo, UpdateConfig\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.ROSTINFO","page":"Home","title":"SoccerManager.ROSTINFO","text":"Path and file format constants\n\nDATADIR0 :: String     : Path to package data directory\nROSTINFO :: RosterInfo : Immutable struct containing config values for reading/writing the fixed-width roster files\n\nSee also\n\nUses    : RosterInfo\nUsed by : init_user_data_dir\nRelated : FUNC\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.TACTICSCONF","page":"Home","title":"SoccerManager.TACTICSCONF","text":"Runtime constants (defined later from file/scripts)\n\nTACTICSCONF :: TacticsConfig   : Immutable struct containing the tactics and bonus skill multipliers\nTSCONF      :: TeamSheetConfig : Immutable struct containing constants used to auto-generate teamsheets\nUPDATECONF  :: UpdateConfig    : Immutable struct containing various league constants\n\nSee also\n\nUses    : TacticsConfig, TeamSheetConfig, UpdateConfig\nUsed by : getTactMult, update_bonus!, update_teamsheet, rand_injury!, update_roster\nRelated : FUNC\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.TSCONF","page":"Home","title":"SoccerManager.TSCONF","text":"Runtime constants (defined later from file/scripts)\n\nTACTICSCONF :: TacticsConfig   : Immutable struct containing the tactics and bonus skill multipliers\nTSCONF      :: TeamSheetConfig : Immutable struct containing constants used to auto-generate teamsheets\nUPDATECONF  :: UpdateConfig    : Immutable struct containing various league constants\n\nSee also\n\nUses    : TacticsConfig, TeamSheetConfig, UpdateConfig\nUsed by : getTactMult, update_bonus!, update_teamsheet, rand_injury!, update_roster\nRelated : FUNC\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.UPDATECONF","page":"Home","title":"SoccerManager.UPDATECONF","text":"Runtime constants (defined later from file/scripts)\n\nTACTICSCONF :: TacticsConfig   : Immutable struct containing the tactics and bonus skill multipliers\nTSCONF      :: TeamSheetConfig : Immutable struct containing constants used to auto-generate teamsheets\nUPDATECONF  :: UpdateConfig    : Immutable struct containing various league constants\n\nSee also\n\nUses    : TacticsConfig, TeamSheetConfig, UpdateConfig\nUsed by : getTactMult, update_bonus!, update_teamsheet, rand_injury!, update_roster\nRelated : FUNC\n\n\n\n\n\n","category":"constant"},{"location":"#SoccerManager.Bonus","page":"Home","title":"SoccerManager.Bonus","text":"Bonus(owntact, opptact, pos, skill, mult)\n\nImmutable struct containing the bonus skill multipliers.\n\nThe bonus determines how well a chosen tactic works against the opposing teams tactic.\n\nFields\n\nowntact :: SVector{12, SubString{String}} : Current team's tactic\nopptact :: SVector{12, SubString{String}} : Opposing team's tactic\npos     :: SVector{12, SubString{String}} : Position that the multiplier applies to\nskill   :: SVector{12, SubString{String}} : Skill that the multiplier applies to\nmult    :: SVector{12, Float32}           : Skill multiplier\n\nSee also\n\nUses    : FUNC\nUsed by : parse_tactics, TacticsConfig\nRelated : Tactics, TACTICSCONF\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Comms","page":"Home","title":"SoccerManager.Comms","text":"Comms(Name, Pos, Prs,\n      St, Tk, Ps, Sh, Sm, Ag,\n      Ded, Act, Fat,\n      Sh0, Ps0, Tk0, Shm, Psm, Tkm, \n      Gam, Sav, Ktk, Kps, Sht, Gls, Ass, DP , Inj, Sus, Fit,\n      KAb, TAb, PAb, SAb,\n      Pk, Gk, Tactic, SubCnt, Wts)\n\nMutable struct containing the commentary (game) data for a single team.\n\nTypes\n\nT1 <: SVector{NLINEUP, String15}\nT2 <: SVector{NLINEUP, Int16}\nT3 <: SVector{NLINEUP, Float32}\nT4 <: SVector{NLINEUP, Bool}\n\nFields\n\nPlayer Info\n\nName :: T1 : Player Name\nPos  :: T1 : Position\nPrs  :: T1 : Preferred side\n\nRatings\n\nSt   :: T2 : Shot-stopping (Goalkeeping) skill\nTk   :: T2 : Tackling skill\nPs   :: T2 : Passing skill\nSh   :: T2 : Shooting skill\nSm   :: T2 : Stamina skill\nAg   :: T2 : Aggression skill\n\nFatigue Deduction\n\nDed  :: T3 : Fatigue Deduction\n\nCurrent State\n\nAct  :: T4 : Currently active flag\nFat  :: T3 : Fatigue\n\nRatings * sidefactor * tacticsmult\n\nSh0  :: T3 : Contribution to team shooting (before fatigue)\nPs0  :: T3 : Contribution to team passing  (before fatigue)\nTk0  :: T3 : Contribution to team takling  (before fatigue)\n\nRatings * sidefactor * tacticsmult * fatigue\n\nShm  :: T3 : Contribution to team shooting (after fatigue)\nPsm  :: T3 : Contribution to team passing  (after fatigue)\nTkm  :: T3 : Contribution to team takling  (after fatigue)\n\nStats\n\nGam  :: T2 : Games Played\nSav  :: T2 : Saves\nKtk  :: T2 : Key Tackles\nKps  :: T2 : Key Passes\nSht  :: T2 : Shots\nGls  :: T2 : Goals\nAss  :: T2 : Assists\nDP   :: T2 : Disciplinary Points\nInj  :: T2 : Games remaining injured\nSus  :: T2 : Games remaining suspended\nFit  :: T2 : Fitness (fatigue). Fully rested = 100.\n\nAbilities\n\nKAb  :: T2 : Shot-stopping (Goalkeeping) ability\nTAb  :: T2 : Tackling ability\nPAb  :: T2 : Passing ability\nSAb  :: T2 : Shooting ability\n\nPenalty Kicker, Current Goal Keeper, and Tactic\n\nPk     :: Int      : Index of penalty kicker\nGk     :: Int      : Index of goalkeeper\nTactic :: String15 : Team tactic\n\nNum subs used and preallocated weight vector\n\nSubCnt :: Int      : Number of subsitutions so far during the game\nWts    :: Weights  : Reusable Weights for weighted sampling of players (who takes a shot, etc)\n\nSee also\n\nUses    : NLINEUP\nUsed by : Team, init_tv \nRelated : Roster, TeamSheet, TeamVec\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.LeagueData","page":"Home","title":"SoccerManager.LeagueData","text":"LeagueData(tv, lg_table, teamnames, schedule)\n\nImmutable struct containing TeamVec, LgTable, TeamNames, and Sched structs for an entire league.\n\nFields\n\ntv        :: TeamVec   : Contains Roster, TeamSheet, and Comms structs for each team\nlg_table  :: LgTable   : The league table (wins, losses, etc)\nteamnames :: TeamNames : Vector of team names\nschedule  :: Sched     : The league schedule\n\nSee also\n\nUses    : TeamVec, Team, LgTable, TeamStats\nUsed by : init_league\nRelated : FUNC\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.LgTable","page":"Home","title":"SoccerManager.LgTable","text":"LgTable(v)\n\nMutable FieldVector containing a TeamStats struct for each team. \n\nStores all the team-level stats for the league. Player-level stats are in the TeamVec vector.\n\nFields\n\nv :: MVector{nteams, TeamStats} : MVector of TeamStats structs, each element contains the stats (wins, losses, etc) for that team\n\nSee also\n\nUses    : TeamStats\nUsed by : init_lgtble\nRelated : TeamVec\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Position","page":"Home","title":"SoccerManager.Position","text":"Position(DF, DM, MF, AM, FW)\n\nImmutable struct containing the tactic skill multipliers for each position.\n\nGoalkeepers are not modified by any tactics.\n\nPostion abbreviations:\n\nGK = Goalkeeper\nDF = Defender\nDM = Defensive Midfielder\nMF = Midfielder\nAM = Attacking Midfielder\nFW = Forward\n\nFields\n\nDF :: Skill : Skill multipliers for players at the DF position\nDM :: Skill : Skill multipliers for players at the DM position\nMF :: Skill : Skill multipliers for players at the MF position\nAM :: Skill : Skill multipliers for players at the AM position\nFW :: Skill : Skill multipliers for players at the FW position\n\nSee also\n\nUses    : Skill\nUsed by : Tactics\nRelated : TACTICSCONF, Bonus\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Roster","page":"Home","title":"SoccerManager.Roster","text":"Roster(Name, Age, Nat, Prs, \n       St, Tk, Ps, Sh, Sm, Ag, \n       KAb, TAb, PAb, SAb, \n       Gam, Sav, Ktk, Kps, Sht, Gls, Ass, \n       DP, Inj, Sus, Fit)\n\nImmutable struct containing the roster of a single team.\n\nTypes\n\nT1 <: SVector{MAXPLAYERS, String15}\nT2 <: SVector{MAXPLAYERS, Int16}\n\nFields\n\nPlayer Info\n\nName :: T1 : Player Name\nAge  :: T1 : Age\nNat  :: T1 : Nationality\nPrs  :: T1 : Preferred side\n\nRatings\n\nSt   :: T2 : Shot-stopping (Goalkeeping) skill\nTk   :: T2 : Tackling skill\nPs   :: T2 : Passing skill\nSh   :: T2 : Shooting skill\nSm   :: T2 : Stamina skill\nAg   :: T2 : Aggression skill\n\nAbilities\n\nKAb  :: T2 : Shot-stopping (Goalkeeping) ability\nTAb  :: T2 : Tackling ability\nPAb  :: T2 : Passing ability\nSAb  :: T2 : Shooting ability\n\nStats\n\nGam  :: T2 : Games Played\nSav  :: T2 : Saves\nKtk  :: T2 : Key Tackles\nKps  :: T2 : Key Passes\nSht  :: T2 : Shots\nGls  :: T2 : Goals\nAss  :: T2 : Assists\nDP   :: T2 : Disciplinary Points\nInj  :: T2 : Games remaining injured\nSus  :: T2 : Games remaining suspended\nFit  :: T2 : Fitness (fatigue). Fully rested = 100.\n\nSee also\n\nUses    : MAXPLAYERS\nUsed by : Team, parse_roster, update_roster, write_roster,  rost2df, flatten_rosters\nRelated : Comms, TeamSheet, TeamVec\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.RosterInfo","page":"Home","title":"SoccerManager.RosterInfo","text":"RosterInfo(nchar, col_end, col_start, header_str, pl_fill)\n\nImmutable struct containing some config values for reading/writing the fixed-width roster files.\n\nTypes\n\nT1 <: SVector{25, Int64}\nT2 <: SVector{2, String127}\nT3 <: SubString{String}\n\nFields\n\nnchar      :: T1 : Number of characters for each (fixed-width) column\ncol_end    :: T1 : Index of last character for each column\ncol_start  :: T1 : Index of first character for each column\nheader_str :: T2 : Roster header\npl_fill    :: T3 : Placeholder values to pad roster if fewer than MAXPLAYERS\n\nSee also\n\nUsed by : ROSTINFO, parse_roster, write_roster\nRelated : TeamSheetConfig, UpdateConfig, TacticsConfig\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Sched","page":"Home","title":"SoccerManager.Sched","text":"Sched(v)\n\nImmutable FieldVector containing the schedule for the league. \n\nEach element of the vector is a matrix containing the weekly schedule. For performance, the schedule consists of Int16 values that index each team rather than strings.\n\nFields\n\nv :: SVector{N, Matrix{Int16}} : SVector of matrices that contain the schedule for each week\n\nSee also\n\nUses    : FUNC\nUsed by : makeschedule, playseason!\nRelated : TeamNames\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Sims","page":"Home","title":"SoccerManager.Sims","text":"Sims(v)\n\nMutable FieldVector containing multiple copies of the same LeagueData struct.\n\nThis allows multiple replicates of the simulated season.\n\nFields\n\nv :: SizedVector{nreps, LeagueData} : SizedVector of nreps LeagueData structs\n\nSee also\n\nUses    : LeagueData\nUsed by : init_sims\nRelated : FUNC\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Skill","page":"Home","title":"SoccerManager.Skill","text":"Tactics(TK, PS, SH)\n\nImmutable struct containing the tactic skill multipliers.\n\nFields\n\nTK :: Float32 : Tackling multiplier\nPS :: Float32 : Passing multiplier\nSH :: Float32 : Shooting multiplier\n\nSee also\n\nUses    : FUNC\nUsed by : Position\nRelated : TACTICSCONF, Tactics, Bonus\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Tactics","page":"Home","title":"SoccerManager.Tactics","text":"Position(DF, DM, MF, AM, FW)\n\nImmutable struct containing the skill multipliers for each tactic.\n\nTactic abbreviations:\n\nN = Normal\nD = Defensive\nA = Attacking\nC = Counter-attack\nL = Long-ball\nP = Passing\n\nFields\n\nN :: Position : Skill multipliers for the Normal tactic\nD :: Position : Skill multipliers for the Defensive tactic\nA :: Position : Skill multipliers for the Attacking tactic\nC :: Position : Skill multipliers for the Counter-attack tactic\nL :: Position : Skill multipliers for the Long-ball tactic\nP :: Position : Skill multipliers for the Passing tactic\n\nSee also\n\nUses    : Position\nUsed by : parse_tactics, TacticsConfig\nRelated : Bonus, Skill, TACTICSCONF\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TacticsConfig","page":"Home","title":"SoccerManager.TacticsConfig","text":"TacticsConfig(tactics, bonus)\n\nImmutable struct containing the tactics and bonus skill multipliers.\n\nFields\n\ntactics :: Tactics : Immutable Tactics struct\nbonus   :: Bonus   : Immutable Bonus struct\n\nSee also\n\nUses    : Tactics, Bonus\nUsed by : TACTICSCONF, parse_tactics\nRelated : TeamSheetConfig, UpdateConfig, RosterInfo\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.Team","page":"Home","title":"SoccerManager.Team","text":"Team(roster, teamsht, comm)\n\nMutable struct containing the Roster, TeamSheet, and Comms structs for a single team.\n\nFields\n\nroster  :: Roster    : An immutable Roster struct\nteamsht :: TeamSheet : An immutable Teamsheet struct\ncomm    :: Comms     : A mutable Comms struct\n\nSee also\n\nUses    : MAXPLAYERS, NLINEUP, Roster, TeamSheet, Comms\nUsed by : TeamVec, init_tv\nRelated : FUNC\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TeamNames","page":"Home","title":"SoccerManager.TeamNames","text":"TeamNames(v)\n\nImmutable FieldVector containing a TeamName struct for each team. \n\nStores the team names for the league.\n\nFields\n\nv :: SVector{nteams, String15} : SVector of the team names\n\nSee also\n\nUses    : FUNC\nUsed by : parse_league, init_lgtble, retrieve_rosters, retrieve_teamsheets, reset_lgtble!, reset_all!\nRelated : Sched\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TeamSheet","page":"Home","title":"SoccerManager.TeamSheet","text":"TeamSheet(StartName, StartPos, SubName, SubPos, PK, Tactic)\n\nImmutable struct containing the teamsheet for a single team.\n\nTypes\n\nT1 <: SVector{11, String15}\nT2 <: SVector{NSUBS, String15}\n\nFields\n\nStartName :: T1       : Names of the starting players\nStartPos  :: T1       : Positions of the starting players\nSubName   :: T2       : Names of the sub players\nSubPos    :: T2       : Positions of the sub players\nPK        :: String15 : Name of the designated penalty kicker\nTactic    :: String15 : Tactic used by the team\n\nSee also\n\nUses    : NSUBS\nUsed by : Team, parse_teamsheet, update_teamsheet\nRelated : Roster, Comms, TeamVec\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TeamSheetConfig","page":"Home","title":"SoccerManager.TeamSheetConfig","text":"TeamSheetConfig(Pos, Nstarters, Nsubs)\n\nImmutable struct containing constants used to auto-generate teamsheets.\n\nPostion abbreviations:\n\nGK = Goalkeeper\nDF = Defender\nDM = Defensive Midfielder\nMF = Midfielder\nAM = Attacking Midfielder\nFW = Forward\n\nFields\n\nPos       :: SVector{6, String15} : Valid Positions\nNstarters :: SVector{6, Int16}    : Number of starters at each position\nNsubs     :: SVector{6, Int16}    : Number of subs at each position\n\nSee also\n\nUses    : FUNC\nUsed by : TSCONF, update_teamsheet\nRelated : UpdateConfig, RosterInfo\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TeamStats","page":"Home","title":"SoccerManager.TeamStats","text":"TeamStats(Pl, Team, P, W, D, L, GF, GA, GD, Pts)\n\nImmutable struct containing the league table values for a single team.\n\nFields\n\nPl   :: Int16 : Place\nTeam :: String15 : Team Name\nP    :: Int16 : Games Played\nW    :: Int16 : Wins\nD    :: Int16 : Draws\nL    :: Int16 : Losses\nGF   :: Int16 : Goals For\nGA   :: Int16 : Goals Against\nGD   :: Int16 : Goal Difference\nPts  :: Int16 : Points (3*W + D)\n\nSee also\n\nUses    : FUNC\nUsed by : LgTable, init_lgtble\nRelated : FUNC\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.TeamVec","page":"Home","title":"SoccerManager.TeamVec","text":"TeamVec(v)\n\nImmutable FieldVector containing a Team struct for each team. \n\nStores all the info (stats, ratings, teamsheets, etc) about the players in the league. Team-level stats are in the LgTable.\n\nFields\n\nv :: SVector{nteams, Team} : SVector of the Team structs, each element contains the player info for that team\n\nSee also\n\nUses    : Team\nUsed by : init_tv\nRelated : LgTable\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.UpdateConfig","page":"Home","title":"SoccerManager.UpdateConfig","text":"UpdateConfig(dp_yel, dp_red, max_inj, sus_margin, fit_gain, fit_after_inj, max_subs)\n\nImmutable struct containing various league constants.\n\nFields\n\ndp_yel        :: Int16 : Disciplinary points per yellow card\ndp_red        :: Int16 : Disciplinary points per red card\nmax_inj       :: Int16 : Max injury length\nsus_margin    :: Int16 : Number of DPs accumulated (since last suspension) to trigger suspension\nfit_gain      :: Int16 : Fitness gain between each game (ie, fatigue recovery)\nfit_after_inj :: Int16 : Fitness after returning from an injury\nmax_subs      :: Int16 : Maximum number of substitutions per game\n\nSee also\n\nUses    : FUNC\nUsed by : UPDATECONF, update_roster\nRelated : TeamSheetConfig, TacticsConfig, RosterInfo\n\n\n\n\n\n","category":"type"},{"location":"#SoccerManager.FUNC-Tuple{}","page":"Home","title":"SoccerManager.FUNC","text":"FUNC()\n\nPlaceholder function\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.calc_contribs!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.calc_contribs!","text":"calc_contribs!(comm, oppcomm)\n\nCalculates the contributions of each player in comm. \n\nThe contributions are the ratings adjusted for tactics, position, and fatigue. The fatigue adjustment is performed during the game loop by recalc_data!.\n\nArguments\n\ncomm    :: Comms : Current team's Comms struct\noppcomm :: Comms : Opposing team's Comms struct\n\nReturns\n\nNothing. Mutates a Comms struct to contain adjusted contributions for each player.\n\nSee also\n\nUses    : Comms, update_sidefactor!, update_tactmult!, update_bonus!\nUsed by : playgame!\nRelated : recalc_data!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.calc_metric-Tuple{Any, Any}","page":"Home","title":"SoccerManager.calc_metric","text":"calc_metric(baseline, sims)\n\nCalculates the mean RMSE (root-mean-squared-error) per team. \n\nOne or more simulated replicates are contained in sims, then all are compared to the same baseline season.\n\nArguments\n\nbaseline :: LeagueData : The baseline (ground truth) league\nsims     :: Sims       : One or more simulated leagues\n\nReturns\n\nA Float32 RMSE value.\n\nSee also\n\nUses    : LeagueData, Sims, getfield_unroll \nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.calc_ranks-Tuple{Any, Any}","page":"Home","title":"SoccerManager.calc_ranks","text":"calc_ranks(roster, fitness)\n\nRanks multiple player skill ratings in a Roster after adjusting each for fitness/fatigue.\n\nIn particular, it ranks the following elements of the roster:\n\nSt = Shot-stopping (Goalkeeing)\nTk = Tackling\nPs = Passing\nSh = Shooting\n\nArguments\n\nroster  :: Roster         : An immutable Roster struct\nfitness :: SVector{Int16} : A vector of player fitness\n\nReturns\n\nA named tuple of the rankings for each skill.\n\nSee also\n\nUses    : Roster, ordinal_rank\nUsed by : update_teamsheet\nRelated : Roster, chooseranks\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.chooseranks-Tuple{Any, Any}","page":"Home","title":"SoccerManager.chooseranks","text":"chooseranks(pos, rnks)\n\nChooses which skill ranks to use based on the position.\n\nIn particular:\n\nGK : St (Shot-stopping)\nDF : Tk (Tackling)\nMF : PS (Passing)\nFW : Sh (Shooting)\n\nOther positions default to Ps (Passing).\n\nArguments\n\npos  :: String15                   : The position\nrnks :: NamedTuple{SVector{Int16}} : NamedTuple of skill ranks\n\nReturns\n\nAn SVector{Int64} of ranks. Lower value = higher rank.\n\nSee also\n\nUses    : FUNC\nUsed by : update_teamsheet\nRelated : calc_ranks, ordinal_rank\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.fillpos-NTuple{4, Any}","page":"Home","title":"SoccerManager.fillpos","text":"fillpos(mults, tacidx, posidx, id)\n\nFills in a position struct with the appropriate multipliers for that tactic and position.\n\nTactic Indices:\n\n1 = N (Normal)\n2 = D (Defensive)\n3 = A (Attacking)\n4 = C (Counter-attack)\n5 = L (Long-ball)\n6 = P (Passing)\n\nPosition Indices:\n\n1 = DF (Defender)\n2 = DM (Defensive Midfielder)\n3 = MF (Midfielder)\n4 = AM (Attacking Midfielder)\n5 = FW (Forward)\n\nArguments\n\nmults  :: Vector{Float32} : Vector of multipliers\ntacidx :: Vector{Int}     : Vector of tactics (labelled as Ints)\nposidx :: Vector{Int}     : Vector of positions (labelled as Ints)\nid     :: Int             : The tactic index to use as a subset\n\nReturns\n\nAn immutable Position struct populated with multipliers.\n\nSee also\n\nUses    : fillskill\nUsed by : parse_tactics\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.fillskill-Tuple{Any}","page":"Home","title":"SoccerManager.fillskill","text":"fillskill(vec)\n\nFills in a Skill struct with TK, PS, and SH (tackling, passing, and shooting) mutlipliers.\n\nArguments\n\nvec :: Vector : Vector of three multipliers\n\nReturns\n\nAn immutable Skill struct containing the values in vec.\n\nSee also\n\nUses    : FUNC\nUsed by : fillpos\nRelated : parse_tactics\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.flatten_rosters-Union{Tuple{N}, Tuple{Any, Val{N}}} where N","page":"Home","title":"SoccerManager.flatten_rosters","text":"flatten_rosters(lg_data, N)\n\nFlattens all the rosters in the TeamVec into a single DataFrame.\n\nArguments\n\nlg_data :: LeagueData : Contains all the player and team-level info for the league\nN       :: Val{N}     : The number of teams\n\nReturns\n\nA DataFrame with one player from the league in each row.\n\nSee also\n\nUses    : LeagueData, Roster, getfield_unroll, MAXPLAYERS\nUsed by : FUNC\nRelated : rost2df, lgtble2df\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.getTactMult-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.getTactMult","text":"getTactMult(tact, pos, skill)\n\nExtracts the multiplier for a given tactic, position, and skill.\n\nArguments\n\ntact  :: String : One character abberivation of the tactic name\npos   :: String : Position name\nskill :: String : Skill name\n\nReturns\n\nA Float32 multiplier value.\n\nSee also\n\nUses    : TacticsConfig, TACTICSCONF\nUsed by : update_tactmult!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.get_intvals-NTuple{4, Any}","page":"Home","title":"SoccerManager.get_intvals","text":"get_intvals(strvec, idx, col_start, col_end)\n\nExtracts/parses integer columns from a roster file.\n\nArguments\n\nstrvec    :: Vector{String}     : Vector of strings, each element is a row of the roster\nidx       :: Int                : Indices of columns to extract\ncol_start :: SVector{25, Int64} : Index of first character for each column\ncol_end   :: SVector{25, Int64} : Index of last character for each column\n\nReturns\n\nA generator used to extract the integer columns.\n\nSee also\n\nUsed by : parse_roster\nRelated : get_strvals\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.get_strvals-NTuple{4, Any}","page":"Home","title":"SoccerManager.get_strvals","text":"get_strvals(strvec, idx, col_start, col_end)\n\nExtracts/parses string columns from a roster file.\n\nArguments\n\nstrvec    :: Vector{String}     : Vector of strings, each element is a row of the roster\nidx       :: Int                : Indices of columns to extract\ncol_start :: SVector{25, Int64} : Index of first character for each column\ncol_end   :: SVector{25, Int64} : Index of last character for each column\n\nReturns\n\nA generator used to extract the string columns.\n\nSee also\n\nUsed by : parse_roster\nRelated : get_intvals\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.getfield_unroll-Union{Tuple{T}, Tuple{T, Symbol}} where T","page":"Home","title":"SoccerManager.getfield_unroll","text":"getfield_unroll(t, f)\n\nExtracts a struct field without any heap allocations.\n\nUsed instead of Base.getfield for performance.\n\nArguments\n\nt :: T : The struct/type that contains the field\nf :: Symbol : The field to extract\n\nReturns\n\nField f of struct t.\n\nSee also\n\nUses    : FUNC\nUsed by : write_comms, write_roster, rost2df, flatten_rosters\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.gl_prob-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.gl_prob","text":"gl_prob(comm, oppcomm, idx_shooter)\n\nCalculate probability the shooter scores a goal.\n\nArguments\n\ncomm        :: Comms : Current team's Comms struct\noppcomm     :: Comms : Opposing team's Comms struct\nidx_shooter :: Int   : Index of shooter in the Comms struct\n\nReturns\n\nA probability, Float32 value between zero and one.\n\nSee also\n\nUsed by : if_shot!\nRelated : sht_prob, tk_prob\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.if_foul!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.if_foul!","text":"if_foul!(comm, oppcomm, wts)\n\nPseudo-randomly decide whether a foul is commited. \n\nThis may result in  Yellow/Red cards and/or a penalty kick. The fouler is ejected from the game without replacement after accumulating two yellow cards or one red card.\n\nArguments\n\ncomm    :: Comms   : Current team's Comms struct\noppcomm :: Comms   : Opposing team's Comms struct\nwts     :: Weights : Reusable Weights for weighted sampling of players (who takes a shot, etc)\n\nReturns\n\nNothing. Mutates Comms elements of the TeamVec vector.\n\nSee also\n\nUses    : Comms, pick_player\nUsed by : mainloop!\nRelated : if_shot!, rand_injury!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.if_shot!-NTuple{4, Any}","page":"Home","title":"SoccerManager.if_shot!","text":"if_shot!(comm, oppcomm, ishome, wts)\n\nPseudo-randomly decide whether an attempted shot takes place and whether it was assisted by a passer. \n\nThe shot may then be prevented by a tackle, off-target, score a goal, or be stopped by the GK. A bonus is added to the home team's probability of taking a shot.\n\nArguments\n\ncomm    :: Comms   : Current team's Comms struct\noppcomm :: Comms   : Opposing team's Comms struct\nishome  :: Bool    : Whether Comms is the home team\nwts     :: Weights : Reusable Weights for weighted sampling of players (who takes a shot, etc).\n\nReturns\n\nNothing. Mutates Comms elements of the TeamVec vector.\n\nSee also\n\nUses    : sht_prob, tk_prob, gl_prob, pick_player, pick_passer\nUsed by : mainloop!\nRelated : rand_injury!, if_foul!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_league-NTuple{4, Any}","page":"Home","title":"SoccerManager.init_league","text":"init_league(rpaths, tspaths, teamnames, schedule; usefile = true)\n\nInitialize a LeagueData struct to hold all the player and team-level info for the league.\n\nContains TeamVec, LgTable, TeamNames, and Sched structs. Rosters are read from file, teamsheets can be either read from file or auto-generated from the rosters.\n\nArguments\n\nrpaths    :: Vector{String} : Vector of paths to the fixed-width roster files\ntspaths   :: Vector{String} : Vector of paths to the fixed-width teamsheet files\nteamnames :: TeamNames      : Vector of team names\nsched     :: Schedule       : The league schedule\n\nKwargs\n\nusefile :: Bool : Whether to read the teamsheets from file rather than auto-generate based on the rosters\n\nReturns\n\nA mutable LeagueData struct.\n\nSee also\n\nUses    : TeamNames, Sched, LeagueData, init_tv, init_lgtble\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_lgtble-Tuple{Any}","page":"Home","title":"SoccerManager.init_lgtble","text":"init_lgtble(teamnames)\n\nCreates the league table, which contains all the team-level info about the league.\n\nArguments\n\nteamnames :: TeamNames : Vector of team names\n\nReturns\n\nA LgTable vector.\n\nSee also\n\nUses    : TeamStats, LgTable, TeamNames\nUsed by : FUNC\nRelated : update_lgTble!, lgrank!, reset_lgtble!, init_tv\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_percent_ratings!-Union{Tuple{N}, Tuple{Any, Any, Val{N}}} where N","page":"Home","title":"SoccerManager.init_percent_ratings!","text":"init_percent_ratings!(sims, baseline, ::Val{N})\n\nInitialize player skill ratings in sims to percentiles of relevant stats in the baseline LeagueData.\n\n  Skill Rating         Statistic\n- St (Shot-Stopping) : Sav (Saves)\n- Tk (Tackling)      : Ktk (Key Tackles)\n- Ps (Passing)       : Kps (Key Passes)\n- Sh (Shooting)      : Sht (Shots)\n- Ag (Aggression)    : All equal to 50\n- Sm (Stamina)       : All equal to 30\n\nArguments\n\nbaseline :: LeagueData : The baseline (ground truth) league\nsims     :: Sims       : One or more simulated leagues\nN        :: Val{N}     : The number of teams\n\nReturns\n\nNothing. Mutates sims to have the new percentile-derived skill ratings.\n\nSee also\n\nUses    : Sims, LeagueData, MAXPLAYERS, stats2rating\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_rand_ratings!-Tuple{Any}","page":"Home","title":"SoccerManager.init_rand_ratings!","text":"init_rand_ratings!(sims)\n\nSets all the rosters in sims to random values between 1 and 99.\n\nArguments\n\nsims  :: Sims : Mutable FieldVector containing multiple copies of the same LeagueData struct\n\nReturns\n\nNothing. Mutates the Sims struct.\n\nSee also\n\nUses    : FUNC\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_sims-NTuple{5, Any}","page":"Home","title":"SoccerManager.init_sims","text":"init_sims(rpaths, tspaths, teamnames, sched, nreps; usefile = true)\n\nInitialize a Sims struct to hold the simulation results. \n\nEach element is LeagueData struct, itself containing TeamVec, LgTable, TeamNames, and Sched structs. Rosters are read from file, teamsheets can be either read from file or auto-generated from the rosters.\n\nArguments\n\nrpaths    :: Vector{String} : Vector of paths to the fixed-width roster files\ntspaths   :: Vector{String} : Vector of paths to the fixed-width teamsheet files\nteamnames :: TeamNames      : Vector of team names\nsched     :: Schedule       : The league schedule\nnreps     :: Int            : Number of times to replay a season with the same ratings\n\nKwargs\n\nusefile :: Bool : Whether to read the teamsheets from file rather than auto-generate based on the rosters\n\nReturns\n\nA Sims struct containing LeagueData structs for nreps replications.\n\nSee also\n\nUses    : TeamNames, LeagueData, Sched, Sims, init_league\nUsed by : FUNC\nRelated : playreps!, reset_sims!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_tv-Tuple{Any, Any}","page":"Home","title":"SoccerManager.init_tv","text":"init_tv(rpaths, tspaths; usefile = true)\n\nCreates a TeamVec vector, which contains all the player-level info about the league.\n\nReads rosters from file for each team. If usefile = true also read the TeamSheet, else generate one based on the Roster. Default Comms are then generated for each team.\n\nArguments\n\nrpaths  :: Vector{String} : Paths to the roster files\ntspaths :: Vector{String} : Paths to the teamsheet files\n\nKwargs\n\nusefile :: Bool : Whether to use teamsheet files or auto-generate based on the roster\n\nReturns\n\nA TeamVec vector.\n\nSee also\n\nUses    : Team, TeamVec, parse_roster, parse_teamsheet, update_teamsheet\nUsed by : FUNC\nRelated : init_lgtble\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.init_user_data_dir-Tuple{Any}","page":"Home","title":"SoccerManager.init_user_data_dir","text":"init_user_data_dir(path_dest; force = false)\n\nCopies the default data directory from the package source directory to one chosen by the user.\n\nWARNING: If force == true, this deletes any existing files in the directory. If the directory already exists, an interactive prompt asks to confirm before doing so.\n\nIf the directory exists and force == false, then it only returns a set of paths.\n\nArguments\n\npath_dest :: String : The destination data directory\n\nKwargs\n\nforce :: Bool : Whether to force overwriting existing files with the same names\n\nReturns\n\nA NamedTuple of paths to the various data.\n\nSee also\n\nUses    : DATADIR0\nUsed by : FUNC\nRelated : retrieve_rosters, retrieve_teamsheets\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.lgrank!-Union{Tuple{N}, Tuple{Any, Val{N}}} where N","page":"Home","title":"SoccerManager.lgrank!","text":"lgrank!(lg_table, ::Val{N}) where {N}\n\nRecalculates the place (ranks) of teams in the league. \n\nFirst according to Pts, then GDand GFas tiebreakers.\n\nArguments\n\nlg_table :: LgTable : The league table (wins, losses, etc)\nN        :: Val{N}  : Number of teams\n\nReturns\n\nNothing. Mutates a LgTable updated with the latest team rankings.\n\nSee also\n\nUses    : LgTable\nUsed by : playseason!\nRelated : init_lgtble, update_lgTble!, reset_lgtble!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.lgtble2df-Tuple{Any}","page":"Home","title":"SoccerManager.lgtble2df","text":"lgtble2df(lg_table)\n\nConverts a LgTable to a DataFrame.\n\nArguments\n\nlg_table :: LgTable : The league table (wins, losses, etc)\n\nReturns\n\nA DataFrame containing the LgTable.\n\nSee also\n\nUses    : LgTable\nUsed by : write_lg_table\nRelated : flatten_rosters, rost2df\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.mainloop!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.mainloop!","text":"mainloop!(comm1, comm2, wts)\n\nMain game loop. \n\nPlays a match one minute at a time and updates values in the Comms structs.\n\nArguments\n\ncomm1 :: Comms   : Home team's Comms struct\ncomm2 :: Comms   : Away team's Comms struct\nwts   :: Weights : Reusable Weights for weighted sampling of players (who takes a shot, etc)\n\nReturns\n\nNothing. Mutates Comms elements of the TeamVec vector.\n\nSee also\n\nUses    : Comms, recalc_data!, if_shot!, if_foul!, rand_injury!\nUsed by : playgame!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.makecomm!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.makecomm!","text":"makecomm!(comm0, roster, teamsht)\n\nUses roster and teamsht to populate comms0. \n\nThe Comms struct then be updated throughout the game.\n\nArguments\n\ncomm0   :: Comms     : A mutable Comms struct\nroster  :: Roster    : An immutable Roster struct\nteamsht :: TeamSheet : An immutable Teamsheet struct\n\nReturns\n\nNothing. Mutates a Comms struct to contain the players in the TeamSheet.\n\nSee also\n\nUses    : Comms, Roster, TeamSheet, match_teamsheet \nUsed by : playgame!, reset_all!\nRelated : update_roster, update_teamsheet\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.makeschedule-Tuple{Any}","page":"Home","title":"SoccerManager.makeschedule","text":"makeschedule(nteams)\n\nCreates a league schedule.\n\nEach element of the vector is a matrix containing the weekly schedule. For performance, the schedule consists of Int16 values that index each team rather than strings.\n\nArguments\n\nnteams :: Int : Number of teams in the league\n\nReturns\n\nA Sched vector where each element is a matrix of the matches for each week.\n\nSee also\n\nUses    : Sched\nUsed by : FUNC\nRelated : playseason!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.match_comms-Tuple{Any, Any}","page":"Home","title":"SoccerManager.match_comms","text":"match_comms(roster, comms)\n\nFinds the roster index of the players in comms.\n\nArguments\n\nroster :: Roster : An immutable Roster struct\ncomm   :: Comms  : A mutable Comms struct\n\nReturns\n\nA vector of roster indices, each corresponding a player found in comms.\n\nSee also\n\nUses    : Roster, Comms\nUsed by : update_roster\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.match_teamsheet-Tuple{Any, Any}","page":"Home","title":"SoccerManager.match_teamsheet","text":"match_teamsheet(roster, teamsheet)\n\nFinds the roster index of the players in teamsheet.\n\nArguments\n\nroster  :: Roster    : An immutable Roster struct\nteamsheet :: TeamSheet : An immutable TeamSheet struct\n\nReturns\n\nA vector of roster indices, each corresponding a player found in teamsheet.\n\nSee also\n\nUses    : Roster, TeamSheet, NLINEUP \nUsed by : makecomm!\nRelated : match_comms\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.maxmin-Tuple{Any}","page":"Home","title":"SoccerManager.maxmin","text":"maxmin(vec; minval = Int16(1), maxval = Int16(99))\n\nTruncates values of a vector to be between minval and maxval.\n\nArguments\n\nvec :: Vector : A vector of values to be truncated\n\nKwargs\n\nminval :: Int : The lowest allowed value\nmaxval :: Int : The highest allowed value\n\nReturns\n\nA vector of values bewteen minval and maxval.\n\nSee also\n\nUses    : FUNC\nUsed by : stats2rating, step_ratings\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.ordinal_rank-Tuple{Any, Any}","page":"Home","title":"SoccerManager.ordinal_rank","text":"ordinal_rank(ratings, fitness)\n\nRanks player ratings after adjusting for fitness/fatigue.\n\nImplemented using SVectors for performance. See StatsBase.ordinalrank.\n\nArguments\n\nratings :: SVector{Int16} : A vector of player ratings\nfitness :: SVector{Int16} : A vector of player fitness\n\nReturns\n\nAn SVector{Int64} of ranks. Lower value = higher rank.\n\nSee also\n\nUses    : FUNC\nUsed by : calc_ranks, update_teamsheet\nRelated : Roster, chooseranks\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.padint3","page":"Home","title":"SoccerManager.padint3","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padint4","page":"Home","title":"SoccerManager.padint4","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padint5","page":"Home","title":"SoccerManager.padint5","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padint6","page":"Home","title":"SoccerManager.padint6","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padintm5","page":"Home","title":"SoccerManager.padintm5","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padstr4","page":"Home","title":"SoccerManager.padstr4","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.padstrm21","page":"Home","title":"SoccerManager.padstrm21","text":"Padding functions\n\npadstrm21 :: {Format.FmtSpec{Format.FmtStr}} : Right-pad String to 21 chars\npadstr4   :: {Format.FmtSpec{Format.FmtStr}} : Left-pad String to 4 chars\npadintm5  :: {Format.FmtSpec{Format.FmtDec}} : Right-pad Int to 5 chars\npadint3   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 3 chars\npadint4   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 4 chars\npadint5   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 5 chars\npadint6   :: {Format.FmtSpec{Format.FmtDec}} : Left-pad Int to 6 chars\n\n\n\n\n\n","category":"function"},{"location":"#SoccerManager.parse_league-Tuple{Any, Any}","page":"Home","title":"SoccerManager.parse_league","text":"parse_league(path_league, nteams)\n\nReads the league.dat file and returns a vector of the first nteams after sorting.\n\nArguments\n\npath_league :: String : Path to the league.dat file containing the team names\nnteams      :: Int    : Number of teams to use\n\nReturns\n\nAn immutable TeamNames struct of team names.\n\nSee also\n\nUses    : TeamNames\nUsed by : FUNC\nRelated : init_lgtble, reset_lgtble!, reset_all!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.parse_roster-Tuple{Any}","page":"Home","title":"SoccerManager.parse_roster","text":"parse_roster(fname)\n\nReads a fixed-width roster file into a Roster struct.\n\nArguments\n\nfname :: String : Path to the roster file\n\nReturns\n\nAn immutable Roster struct, containing the player info for that team.\n\nSee also\n\nUses    : RosterInfo, Roster, read_roster, get_strvals, get_intvals\nUsed by : init_tv\nRelated : parse_teamsheet, parse_tactics\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.parse_tactics-Tuple{Any}","page":"Home","title":"SoccerManager.parse_tactics","text":"parse_tactics(path_tactics)\n\nReads the tactics.dat file and stores in a TacticsConfig struct.\n\nArguments\n\npath_tactics :: String : Path to the tactics.dat file\n\nReturns\n\nAn immutable TacticsConfig struct containing the tactics multipliers.\n\nSee also\n\nUses    : Tactics, Bonus, TacticsConfig, fillpos\nUsed by : FUNC\nRelated : parse_league, parse_teamsheet, parse_roster\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.parse_teamsheet-Tuple{Any}","page":"Home","title":"SoccerManager.parse_teamsheet","text":"parse_teamsheet(fpath)\n\nReads a fixed-width teamsheet file into a TeamSheet struct.\n\nArguments\n\nfpath :: String : Path to the fixed-width teamsheet file\n\nReturns\n\nAn immutable TeamSheet struct, containing the lineup and tactics for that team.\n\nSee also\n\nUses    : readTeamSheet, TeamSheet, NSUBS\nUsed by : init_tv\nRelated : parse_roster, parse_tactics\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.pick_passer-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.pick_passer","text":"pick_passer(x, wts, idx_shooter)\n\nPick a player index using weighted sampling of x. \n\nSets weight of the shooter to zero (passer cannot be the same player who takes a shot).\n\nArguments\n\nx           :: Vector{Int} : Vector of contrib values to be used as weights\nwts         :: Weights     : Reusable Weights for weighted sampling of players (who takes a shot, etc).\nidx_shooter :: Int         : Index of shooter in the Comms struct\n\nReturns\n\nAn index, Int value between one and MAXPLAYERS.\n\nSee also\n\nUsed by : if_shot!\nRelated : pick_player\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.pick_player-Tuple{Any, Any}","page":"Home","title":"SoccerManager.pick_player","text":"pick_player(x, wts)\n\nPick a player index using weighted sampling of x.\n\nArguments\n\nx   :: Vector{Int} : Vector of contrib values to be used as weights\nwts :: Weights     : Reusable Weights for weighted sampling of players (who takes a shot, etc)\n\nReturns\n\nAn index, Int value between one and MAXPLAYERS.\n\nSee also\n\nUsed by : if_shot!\nRelated : pick_passer\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.playgame!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.playgame!","text":"playgame!(tv, idx1, idx2)\n\nPlay a single game between two teams. \n\nStores the results in the corresponding Comms of tv.\n\nArguments\n\ntv   :: TeamVec : Contains Roster, TeamSheet, and Comms structs for each team\nidx1 :: Int     : The index of the home team in tv\nidx2 :: Int     : The index of the away team in tv\n\nReturns\n\nNothing. Mutates the TeamVec vector.\n\nSee also\n\nUses    : makecomm!, calc_contribs!, mainloop!\nUsed by : playgames!\nRelated : playseason!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.playgames!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.playgames!","text":"playgames!(lg_data, wk_sched)\n\nPlay a week of games and store the results in lg_data. \n\nPerforms automated TeamSheet selection after each game.\n\nArguments\n\nlg_data  :: LeagueData    : Contains all the player and team-level info for the league\nwk_sched :: Matrix{Int16} : The schedule of matches for this week\n\nReturns\n\nNothing. Mutates the TeamVec and LgTable vectors in lg_data after each game.\n\nSee also\n\nUses    : LeagueData, playgame!, update_lgTble!, update_roster, update_teamsheet\nUsed by : playseason!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.playreps!-Tuple{Any}","page":"Home","title":"SoccerManager.playreps!","text":"playreps!(sims)\n\nPlays a season for each replicate in sims.\n\nArguments\n\nsims  :: Sims : Mutable FieldVector containing multiple copies of the same LeagueData struct.\n\nReturns\n\nNothing. Mutates the Sims struct.\n\nSee also\n\nUses    : Sims, playseason!\nUsed by : FUNC\nRelated : init_sims, reset_sims!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.playseason!-Tuple{Any}","page":"Home","title":"SoccerManager.playseason!","text":"playseason!(lg_data)\n\nPlay a season of games and store the results in lg_data. \n\nAutomated TeamSheet selection is done after each game.\n\nArguments\n\nlg_data :: LeagueData : Contains all the player and team-level info for the league\n\nReturns\n\nNothing. Mutates the TeamVec and LgTable vectors in lg_data after each game.\n\nSee also\n\nUses    : LeagueData, playgames!, lgrank!\nUsed by : FUNC\nRelated : playgame!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.plot_player_panels-Tuple{Any, Any}","page":"Home","title":"SoccerManager.plot_player_panels","text":"plot_player_panels(flatbase, flatsim; title = )\n\nCreates scatter plots of the player stats in the baseline vs \"simulated\" (with fit ratings) leagues.\n\nStats plotted:\n\nGam : Games \nSav : Saves \nKtk : Tackles \nKps : Passes \nSht : Shots \nGls : Goals \nAss : Assists \nDP  : Disciplinary Points\n\nArguments\n\nflatbase :: DataFrame : Flattened (one player from the league in each row) baseline league\nflatsim  :: DataFrame : Flattened (one player from the league in each row) comparison league\n\nKwargs\n\n`title :: String : Overall title of the panel plot\n\nReturns\n\nAn array of scatterplots.\n\nSee also\n\nUses    : FUNC\nUsed by : stat_scatter\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.plotlog-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.plotlog","text":"plotlog(rmselog, target, idx; kwargs)\n\nPlots the progress of the algorithm fitting.\n\nEg, RMSE vs step index.\n\nArguments\n\nrmselog :: Vector{Float32, Bool} : RMSE and accept-flag for each step\ntarget  :: Float                 : A target RMSE value\nidx     :: Int                   : Index of the last completed step\n\nKwargs\n\nkwargs :: Tuple : Kwargs to be passed to plotting functions\n\nReturns\n\nNothing. Plots (a unicode plot) to REPL.\n\nSee also\n\nUses    : FUNC\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.printlog-NTuple{6, Any}","page":"Home","title":"SoccerManager.printlog","text":"printlog(i, rmselog, init_time, rmse_best, rmse_last, thresh)\n\nPrints the current progress of the fitting algorithm.\n\nArguments\n\ni         :: Int                   : Index of the last step\nrmselog   :: Vector{Float32, Bool} : RMSE and accept-flag for each step\ninit_time :: Float64               : The system time at the start of the run (ie, using time)\nrmse_best :: Tuple{Int, Float32}   : Index and RMSE of the best so-far step\nrmse_last :: Tuple{Int, Float32}   : Index and RMSE of the last accepted step\nthresh    :: Float                 : The accept-threshold used for the last step\n\nReturns\n\nNothing. Prints line to REPL.\n\nSee also\n\nUses    : FUNC\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.rand_fat32-Tuple{Any}","page":"Home","title":"SoccerManager.rand_fat32","text":"rand_fat32(N)\n\nGenerates a vector of random values for fatigue adjustment.\n\nArguments\n\nN::Int : Length of the vector\n\nReturns\n\nA vector of negatively biased random Float32 values.\n\nSee also\n\nUses    : FUNC\nUsed by : recalc_data!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.rand_injury!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.rand_injury!","text":"rand_injury!(comm, oppcomm, wts)\n\nPseudo-randomly decide whether an injury occurs based on opposing teamm's aggression. \n\nIf so, pick a random player (no relation to stamina, etc) and set to injured. If the team has subs remaining, choose the best player as the sub (according to position, preferred side, and skill).\n\nArguments\n\ncomm    :: Comms   : Current team's Comms struct\noppcomm :: Comms   : Opposing team's Comms struct\nwts     :: Weights : Reusable Weights for weighted sampling of players (who takes a shot, etc).\n\nReturns\n\nNothing. Mutates a Comms struct.\n\nSee also\n\nUses    : UpdateConfig, pick_player, update_sub!,            update_sub_gk!, set2inj! \nUsed by : mainloop!\nRelated : if_shot!, if_foul!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.rand_ratings-Tuple{Any}","page":"Home","title":"SoccerManager.rand_ratings","text":"rand_ratings(roster)\n\nGenerates random skill ratings between 1 and 99.\n\nA roster with less than MAXPLAYERS is padded with entries having the player name set to PLACEHOLDER. These will have ratings set to the placeholder value of zero.\n\nArguments\n\nroster :: Roster : An immutable Roster struct\n\nReturns\n\nThe roster with new random ratings.\n\nSee also\n\nUses    : Roster, MAXPLAYERS\nUsed by : init_rand_ratings!\nRelated : RosterInfo\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.randstep-Tuple{Any}","page":"Home","title":"SoccerManager.randstep","text":"randstep(stepsize)\n\nGenerates an SVector of random values between -stepsize to + stepsize.\n\nArguments\n\nstepsize :: Int : Absolute value of the largest allowed step size\n\nReturns\n\nAn SVector of Ints.\n\nSee also\n\nUses    : MAXPLAYERS\nUsed by : step_ratings\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.readTeamSheet-Tuple{Any}","page":"Home","title":"SoccerManager.readTeamSheet","text":"readTeamSheet(fpath)\n\nReads a fixed-width teamsheet file into a vector of strings.\n\nArguments\n\nfpath :: String : Path to the fixed-width teamsheet file\n\nReturns\n\nA vector of strings. Each element is a row of the teamsheet.\n\nSee also\n\nUses    : FUNC\nUsed by : parse_teamsheet\nRelated : read_roster\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.read_roster-Tuple{Any}","page":"Home","title":"SoccerManager.read_roster","text":"read_roster(fname)\n\nReads a fixed-width roster file into a vector of strings.\n\nArguments\n\nfpath :: String : Path to the fixed-width roster file\n\nReturns\n\nA vector of strings. Each element is a row of the roster.\n\nSee also\n\nUses    : FUNC\nUsed by : parse_roster\nRelated : readTeamSheet\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.recalc_data!-Tuple{Any}","page":"Home","title":"SoccerManager.recalc_data!","text":"recalc_data!(comm)\n\nUpdates time played and fatigue level for each player after each minute of the game. \n\nThis is used to adjust contributions to the team's shot, passing, and tackle skill.\n\nArguments\n\ncomm :: Comms : The Comms struct of the team to be updated\n\nReturns\n\nNothing. Mutates Comms elements of the TeamVec vector.\n\nSee also\n\nUses    : Comms, rand_fat32, NLINEUP \nUsed by : mainloop!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.reset_all!-Tuple{Any}","page":"Home","title":"SoccerManager.reset_all!","text":"reset_all!(lg_data)\n\nResets all stats (tv and lg_table elements of lg_data) to default values (ie, to play a new season).\n\nTeamSheets are autogenerated based on rosters.\n\nArguments\n\nlg_data :: LeagueData : Contains all the player and team-level info for the league\n\nReturns\n\nNothing. Mutates lg_data as reset to default values.\n\nSee also\n\nUses    : LeagueData, reset_roster, update_teamsheet, makecomm!, reset_lgtble!\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.reset_lgtble!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.reset_lgtble!","text":"reset_lgtble!(lg_table, teamnames)\n\nResets lg_table to default/zero values (ie, to play a new season).\n\nArguments\n\nlg_table  :: LgTable   : The league table (wins, losses, etc)\nteamnames :: TeamNames : Vector of team names\n\nReturns\n\nNothing. Mutates a LgTable by resetting to default values.\n\nSee also\n\nUses    : LgTable, TeamStats, TeamNames\nUsed by : reset_all!\nRelated : init_lgtble, update_lgTble!, lgrank!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.reset_roster-Tuple{Any}","page":"Home","title":"SoccerManager.reset_roster","text":"reset_roster(roster)\n\nResets the roster to default values (ie, to play a new season).\n\nArguments\n\nroster :: Roster : An immutable Roster struct\n\nReturns\n\nAn updated Roster struct.\n\nSee also\n\nUses    : Roster\nUsed by : reset_all!\nRelated : reset_lgtble!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.reset_sims!-Tuple{Any}","page":"Home","title":"SoccerManager.reset_sims!","text":"reset_sims!(sims)\n\nResets all stats in sims to default values (ie, to play a new season).\n\nTeamSheets are autogenerated based on rosters.\n\nArguments\n\nsims  :: Sims : Mutable FieldVector containing multiple copies of the same LeagueData struct.\n\nReturns\n\nNothing. Mutates sims as reset to default values.\n\nSee also\n\nUses    : Sims, reset_all!\nUsed by : FUNC\nRelated : init_sims, playreps!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.retrieve_rosters-Tuple{Any, Any}","page":"Home","title":"SoccerManager.retrieve_rosters","text":"retrieve_rosters(paths, teamnames; force = false)\n\nCopies the default roster files from the /Roster0 directory to its parent /roster directory.\n\nArguments\n\npaths     :: NamedTuple{String} : The various paths to rosters, teamsheets, etc\nteamnames :: TeamNames          : Vector of team names\n\nKwargs\n\nforce :: Bool : Whether to force overwriting existing files with the same names\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : TeamNames\nUsed by : FUNC\nRelated : retrieve_teamsheets, init_user_data_dir\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.retrieve_teamsheets-Tuple{Any, Any}","page":"Home","title":"SoccerManager.retrieve_teamsheets","text":"retrieve_teamsheets(paths, teamnames; force = false)\n\nCopies the default teamsheet files from the /Teamsheet0 directory to its parent /teamsheet directory.\n\nArguments\n\npaths     :: NamedTuple{String} : The various paths to rosters, teamsheets, etc\nteamnames :: TeamNames          : Vector of team names\n\nKwargs\n\nforce :: Bool : Whether to force overwriting existing files with the same names\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : TeamNames\nUsed by : FUNC\nRelated : retrieve_rosters, init_user_data_dir\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.rost2df-Tuple{Any}","page":"Home","title":"SoccerManager.rost2df","text":"rost2df(roster)\n\nConverts a Roster struct to a DataFrame.\n\nArguments\n\nroster :: Roster : An immutable Roster struct\n\nReturns\n\nA DataFrame containing the roster data.\n\nSee also\n\nUses    : Roster, getfield_unroll\nUsed by : FUNC\nRelated : flatten_rosters, lgtble2df\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.save_rosters-Tuple{Any, Any}","page":"Home","title":"SoccerManager.save_rosters","text":"save_rosters(fpaths, tv)\n\nWrites all the rosters in a league to fixed-width files.\n\nArguments\n\nfpaths :: Vector{String} : Paths to the fixed-width roster files\ntv     :: TeamVec        : Contains Roster, TeamSheet, and Comms structs for each team\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : write_roster\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.set2inj!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.set2inj!","text":"set2inj!(comm, idx_inj)\n\nFlags player as injured and deactivates.\n\nArguments\n\ncomm    :: Comms : Current team's Comms struct\nidx_inj :: Int   : Comms index of the injured player\n\nReturns\n\nNothing. Mutates a Comms struct.\n\nSee also\n\nUses    : FUNC\nUsed by : rand_injury!\nRelated : update_sub!, update_sub_gk!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.sht_prob-Tuple{Any, Any}","page":"Home","title":"SoccerManager.sht_prob","text":"sht_prob(comm, oppcomm)\n\nCalculate probability of team taking a shot.\n\nArguments\n\ncomm    :: Comms : Current team's Comms struct\noppcomm :: Comms : Opposing team's Comms struct\n\nReturns\n\nA probability, Float32 value between zero and one.\n\nSee also\n\nUsed by : if_shot!\nRelated : gl_prob, tk_prob\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.side_balance!-Tuple{Any}","page":"Home","title":"SoccerManager.side_balance!","text":"side_balance!(comm)\n\nAdjusts the contribution of each player using the side balance at that position. \n\nSide balance is the number of players with the same position on the R, C, or L side of the field. Players are penalized if the number of R players != to number of L players, or if there are >3 players in the center with  none on the R or L sides.\n\nArguments\n\ncomm :: Comms : A mutable Comms struct\n\nReturns\n\nNothing. Mutates a Comms struct to contain adjusted contributions for each player.\n\nSee also\n\nUses    : Comms, NLINEUP\nUsed by : calc_contribs!\nRelated : update_tactmult!, update_bonus!, update_sidefactor!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.stat_scatter-Tuple{Any, Any}","page":"Home","title":"SoccerManager.stat_scatter","text":"stat_scatter(lg_data1, lg_data2)\n\nPlots player stats in lg_data1 vs lg_data2.\n\nThe selected stats are described in plot_player_panels.\n\nArguments\n\nlg_data1 :: LeagueData : The baseline (ground truth) league\nlg_data2 :: LeagueData : The simulated (comparison) league\n\nReturns\n\nNothing. Creates a panel of scatterplots.\n\nSee also\n\nUses    : LeagueData, flatten_rosters, plot_player_panels\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.stats2rating-Tuple{Any, Any}","page":"Home","title":"SoccerManager.stats2rating","text":"stats2rating(stats, dt)\n\nTransforms a vector of stats using the function dt, then truncate to valid ratings values (between 1 and 99).\n\nEg, as used by init_percent_ratings! a vector of already ECDF-transformed stats are normalized to Int16 values between 1 and 99.\n\nArguments\n\nstats :: Vector                : A vector of stats (eg, Saves, Goals, etc)\ndt    :: AbstractDataTransform : The transform to be used on stats\n\nReturns\n\nDESCRIPTION\n\nSee also\n\nUses    : maxmin\nUsed by : init_percent_ratings!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.step_ratings-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.step_ratings","text":"step_ratings(roster1, roster2, stepsize)\n\nSamples new skill ratings from roster2 +/- stepsize, then binds them to the corresponding elements of roster1.\n\nArguments\n\nroster1  :: Roster : The destination immutable Roster struct\nroster2  :: Roster : The source immutable Roster struct\nstepsize :: Int    : Absolute value of the largest allowed step size\n\nReturns\n\nThe roster1 struct with new ratings.\n\nSee also\n\nUses    : Roster, maxmin, randstep\nUsed by : update_ratings!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.step_ratings-Tuple{Any, Any}","page":"Home","title":"SoccerManager.step_ratings","text":"step_ratings(roster, stepsize)\n\nSamples new skill ratings from currrent +/- stepsize.\n\nArguments\n\nroster   :: Roster : An immutable Roster struct\nstepsize :: Int    : Absolute value of the largest allowed step size\n\nReturns\n\nThe roster with new ratings.\n\nSee also\n\nUses    : Roster, maxmin, randstep\nUsed by : update_ratings!\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.struct2df-Tuple{Any, Any}","page":"Home","title":"SoccerManager.struct2df","text":"struct2df(s, idx)\n\nConvert a Struct to a DataFrame.\n\nArguments\n\ns   :: Struct      : The struct to be converted\nidx :: Vector{Int] : Selected indices of s\n\nReturns\n\nA DataFrame verion of the input struct.\n\nSee also\n\nUses    : FUNC\nUsed by : FUNC\nRelated : rost2df, lgtble2df\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.tk_prob-Tuple{Any, Any}","page":"Home","title":"SoccerManager.tk_prob","text":"tk_prob(comm, oppcomm)\n\nCalculate probability of potential shooter getting tackled.\n\nArguments\n\ncomm    :: Comms : Current team's Comms struct\noppcomm :: Comms : Opposing team's Comms struct\n\nReturns\n\nA probability, Float32 value between zero and one.\n\nSee also\n\nUsed by : if_shot!\nRelated : gl_prob, sht_prob\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_bonus!-NTuple{4, Any}","page":"Home","title":"SoccerManager.update_bonus!","text":"update_bonus!(comm, owntact, opptact, idx)\n\nUpdates the (shooting, passing, and tackling) contributions for a single player based on their position, their team tactic, and the opponent's team tactic.\n\nArguments\n\ncomm    :: Comms  : A mutable Comms struct\nowntact :: String : The team tactic\nopptact :: String : The opposing team tactic\nidx     :: Int    : The player index in comm\n\nReturns\n\nNothing. Mutates a Comms struct with the updated player contributions.\n\nSee also\n\nUses    : Comms, TacticsConfig, TACTICSCONF\nUsed by : calc_contribs!, update_sub!\nRelated : update_tactmult!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_lgTble!-NTuple{4, Any}","page":"Home","title":"SoccerManager.update_lgTble!","text":"update_lgTble!(lg_table, comms, idx1, idx2)\n\nUpdates the lg_table based on game results stored in comms.\n\nArguments\n\nlg_table :: LgTable             : The league table (wins, losses, etc)\ncomms    :: Tuple{Comms, Comms} : Pair of Comms structs containing results of the last game\nidx1     :: Int                 : Index of the league table for the home team\nidx2     :: Int                 : Index of the league table for the away team\n\nReturns\n\nNothing. Mutates a LgTable updated with the results of the last game.\n\nSee also\n\nUses    : Comms, LgTable\nUsed by : playgames!\nRelated : init_lgtble, lgrank!, reset_lgtble!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_ratings!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.update_ratings!","text":"update_ratings!(sims, sims_last, stepsize)\n\nUpdates skill ratings from each roster in sims_last +/- stepsize, then binds them to the corresponding elements of sims.\n\nEg, used when an MCMC step is rejected. All replicates in sims have identical new ratings.\n\nArguments\n\nsims      :: TYPE : The destination Sims struct\nsims_last :: TYPE : The source Sims struct\nstepsize  :: Int  : Absolute value of the largest allowed step size\n\nReturns\n\nNothing. Mutates the Roster elements of the Sims struct.\n\nSee also\n\nUses    : Sims, step_ratings\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_ratings!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.update_ratings!","text":"update_ratings!(sims, stepsize)\n\nUpdates skill ratings from each roster +/- stepsize.\n\nEg, used when an MCMC step is accepted. All replicates in sims have identical new ratings.\n\nArguments\n\nsims     :: Sims : Mutable FieldVector containing multiple copies of the same LeagueData struct\nstepsize :: Int  : Absolute value of the largest allowed step size\n\nReturns\n\nNothing. Mutates the Roster elements of the Sims struct.\n\nSee also\n\nUses    : Sims, step_ratings\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_roster-Tuple{Any, Any}","page":"Home","title":"SoccerManager.update_roster","text":"update_roster(roster, comms)\n\nUpdates the stats in roster with the game results in comms.\n\nArguments\n\nroster :: Roster : An immutable Roster struct\ncomms  :: Comms  : A mutable Comms struct\n\nReturns\n\nA Roster struct updated with the data from the last game.\n\nSee also\n\nUses    : Roster, Comms, UpdateConfig, match_comms\nUsed by : playgames!\nRelated : makecomm!, update_teamsheet\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_sidefactor!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.update_sidefactor!","text":"update_sidefactor!(comm, idx)\n\nAdjusts the contribution of the player using their preferred side. \n\nEg, a player that prefers R will be penalized when playing on C or R sides.\n\nArguments\n\ncomm :: Comms : A mutable Comms struct\nidx  :: Int   : Index of the player in comm\n\nReturns\n\nNothing. Mutates a Comms struct to contain adjusted contributions for that player.\n\nSee also\n\nUses    : Comms\nUsed by : calc_contribs!, update_sub!\nRelated : update_tactmult!, update_bonus!, side_balance!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_sub!-NTuple{4, Any}","page":"Home","title":"SoccerManager.update_sub!","text":"update_sub!(comm, oppcomm, inj_pos, idx)\n\nPerforms a substitution after injury. \n\nThe sub is set to active, and their contributions are updated given the current tactics.\n\nArguments\n\ncomm    :: Comms  : Current team's 'Comms' struct\noppcomm :: Comms  : Opposing team's 'Comms' struct\ninj_pos :: String : Position being subbed (FWC, MFR, etc)\nidx     :: Int    : 'Comms' index of the sub (new player)\n\nReturns\n\nNothing. Mutates a Comms struct.\n\nSee also\n\nUses    : update_sidefactor!, update_tactmult!, update_bonus!\nUsed by : rand_injury!\nRelated : update_sub_gk!, set2inj! \n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_sub_gk!-Tuple{Any, Any}","page":"Home","title":"SoccerManager.update_sub_gk!","text":"update_sub_gk!(comm, idx)\n\nPerforms a substitution after injury to the goalkeeper. \n\nThe sub is set to active, and their contributions are set to zero (besides shot-stopping).\n\nArguments\n\ncomm :: Comms : Current team's Comms struct\nidx  :: Int   : Comms index of the sub (new player)\n\nReturns\n\nNothing. Mutates a Comms struct.\n\nSee also\n\nUses    : FUNC\nUsed by : rand_injury!\nRelated : update_sub!, set2inj! \n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_tactmult!-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.update_tactmult!","text":"update_tactmult!(comm, idx, tact)\n\nUpdates the (shooting, passing, and tackling) contributions for a single player based on the team tactic and their position.\n\nArguments\n\ncomm :: Comms  : A mutable Comms struct\nidx  :: Int    : The player index in comm\ntact :: String : The team tactic\n\nReturns\n\nNothing. Mutates a Comms struct with the updated player contributions.\n\nSee also\n\nUses    : Comms, getTactMult\nUsed by : calc_contribs!, update_sub!\nRelated : update_bonus!\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.update_teamsheet-Tuple{Any}","page":"Home","title":"SoccerManager.update_teamsheet","text":"update_teamsheet(roster; tactic = N)\n\nUpdates a teamsheet based on the skill ratings, fitness, and availability (injury/suspension) in the roster.\n\nDefaults to side = Center, like in ESMS.\n\nArguments\n\nroster :: Roster : An immutable Roster struct\n\nKwargs\n\ntactic :: String : The team tactic. Defaults to N (Normal)\n\nReturns\n\nAn immutable TeamSheet struct based on the current roster.\n\nSee also\n\nUses    : Roster, TeamSheetConfig, TeamSheet, ordinal_rank, calc_ranks, chooseranks\nUsed by : playgames!, init_tv, reset_all!\nRelated : makecomm!, update_roster\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.write_comms-Tuple{Any, Any, Any}","page":"Home","title":"SoccerManager.write_comms","text":"write_comms(comms, path_xxxx, tnames)\n\nWrites the game results (comms) to a file.\n\nThe file contains a minute-by-minute game log, a fixed-width table for each Comms, and is named tname[1]_tname[2].txt\n\nArguments\n\ncomm   :: Comms          : A mutable Comms struct\ndir    :: String         : Path to the directory where the file is saved\ntnames :: Vector{String} : A vector containing the names of the two teams\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : Comms\nUsed by : FUNC\nRelated : write_roster\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.write_lg_table-Tuple{Any, Any}","page":"Home","title":"SoccerManager.write_lg_table","text":"write_lg_table(fpath, lg_table)\n\nWrites the lg_table to a fixed-width file.\n\nArguments\n\nfpath    :: String  : Path of the new league table file\nlg_table :: LgTable : The league table (wins, losses, etc)\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : lgtble2df\nUsed by : FUNC\nRelated : FUNC\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.write_roster-Tuple{Any, Any}","page":"Home","title":"SoccerManager.write_roster","text":"write_roster(fpath, roster)\n\nWrites the roster to a fixed-width file.\n\nArguments\n\nfpath  :: String : Path to the fixed-width roster file\nroster :: Roster : An immutable Roster struct\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : Roster, getfield_unroll, padint3, padint4\nUsed by : save_rosters\nRelated : read_roster, parse_roster, write_comms, write_teamsheet\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.write_teamsheet-Tuple{Any, Any}","page":"Home","title":"SoccerManager.write_teamsheet","text":"write_teamsheet(fpath, teamsheet)\n\nWrites the teamsheet to a fixed-width file.\n\nArguments\n\nfpath     :: String    : Path to the fixed-width teamsheet file\nteamsheet :: TeamSheet : An immutable TeamSheet struct\n\nReturns\n\nNothing.\n\nSee also\n\nUses    : TeamSheet\nUsed by : FUNC\nRelated : write_roster, write_comms\n\n\n\n\n\n","category":"method"},{"location":"#SoccerManager.@multi","page":"Home","title":"SoccerManager.@multi","text":"Choose multi-threading library (`@batch` has less overhead but `@threads` is more composable)\n\nSee SoccerManager.jl:\n\nvar\"@multi\" = ifelse(false, var\"@batch\", var\"@threads\")\n\n\n\n\n\n","category":"macro"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
