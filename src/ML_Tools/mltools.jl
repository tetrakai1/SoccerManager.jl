"""
    Sims(v)

Mutable `FieldVector` containing multiple copies of the same `LeagueData` struct.

This allows multiple replicates of the simulated season.

# Fields
- `v :: SizedVector{nreps, LeagueData}` : `SizedVector` of nreps `LeagueData` structs

# See also 
- Uses    : [`LeagueData`](@ref)
- Used by : [`init_sims`](@ref)
- Related : [`FUNC`](@ref)
"""
mutable struct Sims{N, LeagueData} <: FieldVector{N, LeagueData}
    v :: SizedVector{N, LeagueData, Vector{LeagueData}}
end
Base.getindex(v  :: Sims, i :: Int)                  = getindex(v.v, i)
Base.setindex!(v :: Sims, X :: LeagueData, i :: Int) = setindex!(v.v, X, i)


"""
    init_sims(rpaths, tspaths, teamnames, sched, nreps; usefile = true)

Initialize a `Sims` struct to hold the simulation results. 

Each element is `LeagueData` struct, itself containing `TeamVec`, `LgTable`, `TeamNames`, and `Sched` structs. Rosters are read from file, teamsheets can be either read from file or auto-generated from the rosters.

# Arguments
- `rpaths    :: Vector{String}` : Vector of paths to the fixed-width roster files
- `tspaths   :: Vector{String}` : Vector of paths to the fixed-width teamsheet files
- `teamnames :: TeamNames`      : Vector of team names
- `sched     :: Schedule`       : The league schedule
- `nreps     :: Int`            : Number of times to replay a season with the same ratings

# Kwargs
- `usefile :: Bool` : Whether to read the teamsheets from file rather than auto-generate based on the rosters

# Returns
A `Sims` struct containing `LeagueData` structs for `nreps` replications.

# See also
- Uses    : [`TeamNames`](@ref), [`LeagueData`](@ref), [`Sched`](@ref), [`Sims`](@ref), [`init_league`](@ref)
- Used by : [`FUNC`](@ref)
- Related : [`playreps!`](@ref), [`reset_sims!`](@ref)
"""
function init_sims(rpaths, tspaths, teamnames, sched, nreps; usefile = true)
    nteams = length(teamnames)
    T      = SizedVector{nreps, LeagueData{nteams}}
    sims   = T([init_league(rpaths, tspaths, teamnames, sched; usefile) for _ in 1:nreps])

    return Sims(sims)
end

"""
    playreps!(sims)

Plays a season for each replicate in `sims`.

# Arguments
- `sims  :: Sims` : Mutable `FieldVector` containing multiple copies of the same `LeagueData` struct.

# Returns
Nothing. Mutates the `Sims` struct.

# See also
- Uses    : [`Sims`](@ref), [`playseason!`](@ref)
- Used by : [`FUNC`](@ref)
- Related : [`init_sims!`](@ref), [`reset_sims!`](@ref)
"""
function playreps!(sims)
    @threads for i in eachindex(sims)
        playseason!(sims[i]);
    end
    return nothing
end


"""
    reset_sims!(sims)

Resets all stats in `sims` to default values (ie, to play a new season).

`TeamSheets` are autogenerated based on rosters.

# Arguments
- `sims  :: Sims` : Mutable `FieldVector` containing multiple copies of the same `LeagueData` struct.

# Returns
Nothing. Mutates `sims` as reset to default values.

# See also
- Uses    : [`Sims`](@ref), [`reset_all!`](@ref)
- Used by : [`FUNC`](@ref)
- Related : [`init_sims!`](@ref), [`playreps!`](@ref)
"""
function reset_sims!(sims)
    for i in eachindex(sims)
        reset_all!(sims[i])
    end
    return sims
end
